{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport * as ProductActions from './product.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../services/product.service\";\nclass ProductEffects {\n  constructor(actions$, productService) {\n    this.actions$ = actions$;\n    this.productService = productService;\n    this.loadProducts$ = createEffect(() => this.actions$.pipe(ofType(ProductActions.loadProducts), mergeMap(() => this.productService.getAllProducts().pipe(map(products => ProductActions.loadProductsSuccess({\n      products\n    })), catchError(error => of(ProductActions.loadProductsFailure({\n      error\n    })))))));\n  }\n  static {\n    this.ɵfac = function ProductEffects_Factory(t) {\n      return new (t || ProductEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.ProductService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ProductEffects,\n      factory: ProductEffects.ɵfac\n    });\n  }\n}\nexport { ProductEffects };","map":{"version":3,"names":["createEffect","ofType","of","catchError","map","mergeMap","ProductActions","ProductEffects","constructor","actions$","productService","loadProducts$","pipe","loadProducts","getAllProducts","products","loadProductsSuccess","error","loadProductsFailure","i0","ɵɵinject","i1","Actions","i2","ProductService","factory","ɵfac"],"sources":["/Users/bhumi/Desktop/Copilot/shopping-cart-app/src/app/products/state/product.effects.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport { ProductService } from '../services/product.service';\nimport * as ProductActions from './product.actions';\n\n@Injectable()\nexport class ProductEffects {\n  loadProducts$ = createEffect(() => this.actions$.pipe(\n    ofType(ProductActions.loadProducts),\n    mergeMap(() => this.productService.getAllProducts().pipe(\n      map(products => ProductActions.loadProductsSuccess({ products })),\n      catchError(error => of(ProductActions.loadProductsFailure({ error })))\n    ))\n  ));\n\n  constructor(\n    private actions$: Actions,\n    private productService: ProductService\n  ) {}\n}"],"mappings":"AACA,SAAkBA,YAAY,EAAEC,MAAM,QAAQ,eAAe;AAC7D,SAASC,EAAE,QAAQ,MAAM;AACzB,SAASC,UAAU,EAAEC,GAAG,EAAEC,QAAQ,QAAQ,gBAAgB;AAE1D,OAAO,KAAKC,cAAc,MAAM,mBAAmB;;;;AAEnD,MACaC,cAAc;EASzBC,YACUC,QAAiB,EACjBC,cAA8B;IAD9B,KAAAD,QAAQ,GAARA,QAAQ;IACR,KAAAC,cAAc,GAAdA,cAAc;IAVxB,KAAAC,aAAa,GAAGX,YAAY,CAAC,MAAM,IAAI,CAACS,QAAQ,CAACG,IAAI,CACnDX,MAAM,CAACK,cAAc,CAACO,YAAY,CAAC,EACnCR,QAAQ,CAAC,MAAM,IAAI,CAACK,cAAc,CAACI,cAAc,EAAE,CAACF,IAAI,CACtDR,GAAG,CAACW,QAAQ,IAAIT,cAAc,CAACU,mBAAmB,CAAC;MAAED;IAAQ,CAAE,CAAC,CAAC,EACjEZ,UAAU,CAACc,KAAK,IAAIf,EAAE,CAACI,cAAc,CAACY,mBAAmB,CAAC;MAAED;IAAK,CAAE,CAAC,CAAC,CAAC,CACvE,CAAC,CACH,CAAC;EAKC;;;uBAZQV,cAAc,EAAAY,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,OAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,cAAA;IAAA;EAAA;;;aAAdjB,cAAc;MAAAkB,OAAA,EAAdlB,cAAc,CAAAmB;IAAA;EAAA;;SAAdnB,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}