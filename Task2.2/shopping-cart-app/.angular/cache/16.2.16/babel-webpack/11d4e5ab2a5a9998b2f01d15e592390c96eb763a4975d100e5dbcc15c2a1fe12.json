{"ast":null,"code":"import { createEffect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { catchError, map, mergeMap } from 'rxjs/operators';\nimport * as ProductActions from './product.actions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"../services/product.service\";\nlet ProductEffects = /*#__PURE__*/(() => {\n  class ProductEffects {\n    constructor(actions$, productService) {\n      this.actions$ = actions$;\n      this.productService = productService;\n      this.loadProducts$ = createEffect(() => this.actions$.pipe(ofType(ProductActions.loadProducts), mergeMap(() => this.productService.getAllProducts().pipe(map(products => ProductActions.loadProductsSuccess({\n        products\n      })), catchError(error => of(ProductActions.loadProductsFailure({\n        error\n      })))))));\n    }\n    static {\n      this.ɵfac = function ProductEffects_Factory(t) {\n        return new (t || ProductEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.ProductService));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: ProductEffects,\n        factory: ProductEffects.ɵfac\n      });\n    }\n  }\n  return ProductEffects;\n})();\nexport { ProductEffects };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}