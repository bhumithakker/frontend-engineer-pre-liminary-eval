{"ast":null,"code":"import { createReducer, on } from '@ngrx/store';\nimport * as CartActions from './cart.actions';\nexport const initialState = {\n  items: []\n};\nexport const cartReducer = createReducer(initialState, on(CartActions.addToCart, (state, {\n  product,\n  quantity\n}) => {\n  const existingItemIndex = state.items.findIndex(item => item.product.id === product.id);\n  if (existingItemIndex > -1) {\n    // Item exists, update quantity\n    const updatedItems = [...state.items];\n    updatedItems[existingItemIndex] = {\n      ...updatedItems[existingItemIndex],\n      quantity: updatedItems[existingItemIndex].quantity + quantity\n    };\n    return {\n      ...state,\n      items: updatedItems\n    };\n  } else {\n    // Item doesn't exist, add new item\n    return {\n      ...state,\n      items: [...state.items, {\n        product,\n        quantity\n      }]\n    };\n  }\n}), on(CartActions.removeFromCart, (state, {\n  productId\n}) => ({\n  ...state,\n  items: state.items.filter(item => item.product.id !== productId)\n})), on(CartActions.updateQuantity, (state, {\n  productId,\n  quantity\n}) => {\n  const updatedItems = state.items.map(item => item.product.id === productId ? {\n    ...item,\n    quantity\n  } : item);\n  return {\n    ...state,\n    items: updatedItems\n  };\n}), on(CartActions.clearCart, state => ({\n  ...state,\n  items: []\n})), on(CartActions.loadCartFromStorage, state => {\n  const savedCart = localStorage.getItem('cart');\n  if (savedCart) {\n    try {\n      const parsedCart = JSON.parse(savedCart);\n      return {\n        ...state,\n        items: parsedCart.items\n      };\n    } catch (e) {\n      console.error('Failed to parse cart from localStorage', e);\n    }\n  }\n  return state;\n}));","map":{"version":3,"names":["createReducer","on","CartActions","initialState","items","cartReducer","addToCart","state","product","quantity","existingItemIndex","findIndex","item","id","updatedItems","removeFromCart","productId","filter","updateQuantity","map","clearCart","loadCartFromStorage","savedCart","localStorage","getItem","parsedCart","JSON","parse","e","console","error"],"sources":["/Users/bhumi/Desktop/Copilot/shopping-cart-app/src/app/state/cart/cart.reducer.ts"],"sourcesContent":["import { createReducer, on } from '@ngrx/store';\nimport { CartItem } from '../../shared/models/cart-item.model';\nimport * as CartActions from './cart.actions';\n\nexport interface CartState {\n  items: CartItem[];\n}\n\nexport const initialState: CartState = {\n  items: [],\n};\n\nexport const cartReducer = createReducer(\n  initialState,\n  on(CartActions.addToCart, (state, { product, quantity }) => {\n    const existingItemIndex = state.items.findIndex(item => item.product.id === product.id);\n    \n    if (existingItemIndex > -1) {\n      // Item exists, update quantity\n      const updatedItems = [...state.items];\n      updatedItems[existingItemIndex] = {\n        ...updatedItems[existingItemIndex],\n        quantity: updatedItems[existingItemIndex].quantity + quantity\n      };\n      return { ...state, items: updatedItems };\n    } else {\n      // Item doesn't exist, add new item\n      return {\n        ...state,\n        items: [...state.items, { product, quantity }]\n      };\n    }\n  }),\n  \n  on(CartActions.removeFromCart, (state, { productId }) => ({\n    ...state,\n    items: state.items.filter(item => item.product.id !== productId)\n  })),\n  \n  on(CartActions.updateQuantity, (state, { productId, quantity }) => {\n    const updatedItems = state.items.map(item => \n      item.product.id === productId ? { ...item, quantity } : item\n    );\n    \n    return {\n      ...state,\n      items: updatedItems\n    };\n  }),\n  \n  on(CartActions.clearCart, state => ({\n    ...state,\n    items: []\n  })),\n  \n  on(CartActions.loadCartFromStorage, (state) => {\n    const savedCart = localStorage.getItem('cart');\n    if (savedCart) {\n      try {\n        const parsedCart = JSON.parse(savedCart);\n        return { ...state, items: parsedCart.items };\n      } catch (e) {\n        console.error('Failed to parse cart from localStorage', e);\n      }\n    }\n    return state;\n  })\n);"],"mappings":"AAAA,SAASA,aAAa,EAAEC,EAAE,QAAQ,aAAa;AAE/C,OAAO,KAAKC,WAAW,MAAM,gBAAgB;AAM7C,OAAO,MAAMC,YAAY,GAAc;EACrCC,KAAK,EAAE;CACR;AAED,OAAO,MAAMC,WAAW,GAAGL,aAAa,CACtCG,YAAY,EACZF,EAAE,CAACC,WAAW,CAACI,SAAS,EAAE,CAACC,KAAK,EAAE;EAAEC,OAAO;EAAEC;AAAQ,CAAE,KAAI;EACzD,MAAMC,iBAAiB,GAAGH,KAAK,CAACH,KAAK,CAACO,SAAS,CAACC,IAAI,IAAIA,IAAI,CAACJ,OAAO,CAACK,EAAE,KAAKL,OAAO,CAACK,EAAE,CAAC;EAEvF,IAAIH,iBAAiB,GAAG,CAAC,CAAC,EAAE;IAC1B;IACA,MAAMI,YAAY,GAAG,CAAC,GAAGP,KAAK,CAACH,KAAK,CAAC;IACrCU,YAAY,CAACJ,iBAAiB,CAAC,GAAG;MAChC,GAAGI,YAAY,CAACJ,iBAAiB,CAAC;MAClCD,QAAQ,EAAEK,YAAY,CAACJ,iBAAiB,CAAC,CAACD,QAAQ,GAAGA;KACtD;IACD,OAAO;MAAE,GAAGF,KAAK;MAAEH,KAAK,EAAEU;IAAY,CAAE;GACzC,MAAM;IACL;IACA,OAAO;MACL,GAAGP,KAAK;MACRH,KAAK,EAAE,CAAC,GAAGG,KAAK,CAACH,KAAK,EAAE;QAAEI,OAAO;QAAEC;MAAQ,CAAE;KAC9C;;AAEL,CAAC,CAAC,EAEFR,EAAE,CAACC,WAAW,CAACa,cAAc,EAAE,CAACR,KAAK,EAAE;EAAES;AAAS,CAAE,MAAM;EACxD,GAAGT,KAAK;EACRH,KAAK,EAAEG,KAAK,CAACH,KAAK,CAACa,MAAM,CAACL,IAAI,IAAIA,IAAI,CAACJ,OAAO,CAACK,EAAE,KAAKG,SAAS;CAChE,CAAC,CAAC,EAEHf,EAAE,CAACC,WAAW,CAACgB,cAAc,EAAE,CAACX,KAAK,EAAE;EAAES,SAAS;EAAEP;AAAQ,CAAE,KAAI;EAChE,MAAMK,YAAY,GAAGP,KAAK,CAACH,KAAK,CAACe,GAAG,CAACP,IAAI,IACvCA,IAAI,CAACJ,OAAO,CAACK,EAAE,KAAKG,SAAS,GAAG;IAAE,GAAGJ,IAAI;IAAEH;EAAQ,CAAE,GAAGG,IAAI,CAC7D;EAED,OAAO;IACL,GAAGL,KAAK;IACRH,KAAK,EAAEU;GACR;AACH,CAAC,CAAC,EAEFb,EAAE,CAACC,WAAW,CAACkB,SAAS,EAAEb,KAAK,KAAK;EAClC,GAAGA,KAAK;EACRH,KAAK,EAAE;CACR,CAAC,CAAC,EAEHH,EAAE,CAACC,WAAW,CAACmB,mBAAmB,EAAGd,KAAK,IAAI;EAC5C,MAAMe,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;EAC9C,IAAIF,SAAS,EAAE;IACb,IAAI;MACF,MAAMG,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACL,SAAS,CAAC;MACxC,OAAO;QAAE,GAAGf,KAAK;QAAEH,KAAK,EAAEqB,UAAU,CAACrB;MAAK,CAAE;KAC7C,CAAC,OAAOwB,CAAC,EAAE;MACVC,OAAO,CAACC,KAAK,CAAC,wCAAwC,EAAEF,CAAC,CAAC;;;EAG9D,OAAOrB,KAAK;AACd,CAAC,CAAC,CACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}