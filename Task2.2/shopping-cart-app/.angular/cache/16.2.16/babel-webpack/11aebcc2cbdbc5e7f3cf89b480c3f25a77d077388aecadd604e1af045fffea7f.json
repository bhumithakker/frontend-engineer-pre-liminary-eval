{"ast":null,"code":"import { createReducer, on } from '@ngrx/store';\nimport * as CartActions from './cart.actions';\nexport const initialState = {\n  items: []\n};\nexport const cartReducer = createReducer(initialState, on(CartActions.addToCart, (state, {\n  product,\n  quantity\n}) => {\n  const existingItemIndex = state.items.findIndex(item => item.product.id === product.id);\n  if (existingItemIndex > -1) {\n    // Item exists, update quantity\n    const updatedItems = [...state.items];\n    updatedItems[existingItemIndex] = {\n      ...updatedItems[existingItemIndex],\n      quantity: updatedItems[existingItemIndex].quantity + quantity\n    };\n    return {\n      ...state,\n      items: updatedItems\n    };\n  } else {\n    // Item doesn't exist, add new item\n    return {\n      ...state,\n      items: [...state.items, {\n        product,\n        quantity\n      }]\n    };\n  }\n}), on(CartActions.removeFromCart, (state, {\n  productId\n}) => ({\n  ...state,\n  items: state.items.filter(item => item.product.id !== productId)\n})), on(CartActions.updateQuantity, (state, {\n  productId,\n  quantity\n}) => {\n  const updatedItems = state.items.map(item => item.product.id === productId ? {\n    ...item,\n    quantity\n  } : item);\n  return {\n    ...state,\n    items: updatedItems\n  };\n}), on(CartActions.clearCart, state => ({\n  ...state,\n  items: []\n})), on(CartActions.loadCartFromStorage, state => {\n  const savedCart = localStorage.getItem('cart');\n  if (savedCart) {\n    try {\n      const parsedCart = JSON.parse(savedCart);\n      return {\n        ...state,\n        items: parsedCart.items\n      };\n    } catch (e) {\n      console.error('Failed to parse cart from localStorage', e);\n    }\n  }\n  return state;\n}));","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}